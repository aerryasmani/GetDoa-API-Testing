{
	"info": {
		"_postman_id": "46ef5de1-3aae-46c4-9a81-16c99aea0ab3",
		"name": "GetDoa X SedekahJer",
		"description": "# About this collection\n\nThis collection helps ensure your API continues to work as expected after updates or changes. It contains sample requests for a series of tests that validate different aspects of an API, including:\n\n1. **Status code verification:** We'll check if the API returns the expected status codes for various requests, ensuring reliability and proper error handling.\n2. **JSON schema verification:** We'll make sure the JSON response conforms to a specified JSON Schema, ensuring API contracts are honored.\n3. **Response time verification:** We'll verify that the API's response time is within the acceptable range, providing a smooth user experience and optimizing performance.\n4. **Response body verification:** We'll validate the structure and content of the response body for accuracy, ensuring the integrity of the data and preventing potential issues downstream.\n5. **Header verification:** We'll confirm the presence and correct values of specific headers in the response, enabling secure and well-structured communication between your app and its users.\n    \n\n## **Using this collection**\n\n**Step 1:** Send the sample requests and view the response and test results.\n\n**Step 2:** Replace the sample request URLs with your desired API endpoints.\n\n**Step 3:** Customize the tests in the \"Tests\" tab if needed. Don't forget to save your changes.\n\n**Step 4:** Run the collection by selecting \"Run\".\n\n### Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Structure Verification",
			"item": [
				{
					"name": "JSON schema verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e24451c-5402-4831-b451-7c88f1330371",
								"exec": [
									"// In the \"Tests\" tab of your request",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"name_my\": { \"type\": \"string\" },",
									"        \"name_en\": { \"type\": \"string\" },",
									"        \"content\": { \"type\": \"string\" },",
									"        \"reference_my\": { \"type\": \"string\" },",
									"        \"reference_en\": { \"type\": \"string\" },",
									"        \"meaning_my\": { \"type\": \"string\" },",
									"        \"meaning_en\": { \"type\": \"string\" },",
									"        \"category_names\": {",
									"            \"type\": \"array\",",
									"            \"items\": { \"type\": \"string\" }",
									"        }",
									"    },",
									"    \"required\": [",
									"        \"name_my\",",
									"        \"name_en\",",
									"        \"content\",",
									"        \"reference_my\",",
									"        \"reference_en\",",
									"        \"meaning_my\",",
									"        \"meaning_en\",",
									"        \"category_names\"",
									"    ]",
									"};",
									"",
									"// Test if response has data",
									"pm.test('Response has data', function() {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Validate response against schema",
									"pm.test('Schema is valid', function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "749b8658-004b-45df-879d-f5d16c551b5b",
								"exec": [
									"// In Pre-request Script tab\r",
									"pm.variables.set('jsonData', JSON.stringify({\r",
									"    \"name_my\": \"Ditetapkan Hati\",\r",
									"    \"name_en\": \"Firmness of Heart\",\r",
									"    \"content\": \"يَا مُقَلِّبَ الْقُلُوبِ ثَبِّتْ قَلْبِي عَلَى دِيْنِكَ\",\r",
									"    \"reference_my\": \"Riwayat Tirmidzi (3522)\",\r",
									"    \"reference_en\": \"Narrated by Tirmidzi (3522)\",\r",
									"    \"meaning_my\": \"Wahai Tuhan yang membolak-balikkan hati, tetapkanlah hatiku di atas agama-Mu\",\r",
									"    \"meaning_en\": \"O Turner of the hearts, make my heart firm upon Your religion\",\r",
									"    \"category_names\": [\r",
									"        \"Hati\",\r",
									"        \"Heart\",\r",
									"        \"Firmness\"\r",
									"    ]\r",
									"}));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a919d3d5-b4b9-4c39-a380-9a3deebb7ab3",
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\n    \"title\": \"Sapiens\",\n    \"author\": \"Yuval Noah Harari\",\n    \"published\": 2011\n}, {\n    \"title\": \"Moneyball\",\n    \"author\": \"Michael Lewis\",\n    \"published\": 2010\n}, {\n    \"title\": \"Women & Power\",\n    \"author\": \"Mary Beard\",\n    \"published\": 2017\n}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{Base URL}}/{{Resource}}/{{Param}}",
						"description": "This request has a test using Postman's built-in support for JSON Schema verification to ensure that the response data matches the expected shape.\n\nSchema validation can be used to verify your API returns data in the right format, without worrying about the exact values. This might be helpful when testing various inputs for a consistent output format.\n\nLearn more about JSON Schema at [https://json-schema.org](https://json-schema.org/.)."
					},
					"response": []
				},
				{
					"name": "Status code verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cf0250c1-ec39-423e-8a7b-99ab468aace2",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/get",
						"description": "The test on this request asserts that the reponse has a \"200 OK\" status.\n\nYou can check for any HTTP status code using the same mechanism, for example `pm.response.to.have.status(403)` if your API should return an \"Unauthorized\" response."
					},
					"response": []
				},
				{
					"name": "Verify Response Structure",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd195d39-6966-4ec2-9ef6-cede2aeffa22",
								"exec": [
									"//Server Status\r",
									"pm.test(\"Check server status\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Server status: OK (200)\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Doa Structure\", function() {\r",
									"   const jsonData = pm.response.json();\r",
									"   \r",
									"   // Check if required fields exist\r",
									"   pm.expect(jsonData).to.have.property('name_my');\r",
									"   pm.expect(jsonData).to.have.property('name_en');\r",
									"   pm.expect(jsonData).to.have.property('content'); \r",
									"   pm.expect(jsonData).to.have.property('reference_my');\r",
									"   pm.expect(jsonData).to.have.property('reference_en');\r",
									"   pm.expect(jsonData).to.have.property('meaning_my');\r",
									"   pm.expect(jsonData).to.have.property('meaning_en');\r",
									"   pm.expect(jsonData).to.have.property('category_names');\r",
									"   \r",
									"   // Verify category_names is an array\r",
									"   pm.expect(jsonData.category_names).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9a27cc09-894c-4278-b5a0-5d252574a69b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{Base URL}}/{{Resource}}/{{Param}}"
					},
					"response": []
				}
			],
			"id": "42693220-6688-441d-b4e6-7ce581cb07af"
		},
		{
			"name": "Random Generation",
			"item": [
				{
					"name": "Check that same doa doesn't repeat in X consecutive calls",
					"id": "b6ef6417-8a35-4721-af8e-f61c186a6613",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Test multiple rapid requests to ensure randomness",
					"id": "a87482a4-c348-4f99-b5cd-296ed7ebf1c8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"id": "9324afc3-926f-4598-9fd1-8c851231b2f7"
		},
		{
			"name": "New Folder",
			"item": [],
			"id": "7b8dfb35-48ca-490d-b652-485e8e74d789"
		},
		{
			"name": "Response body verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getData = () => pm.response.json().data;",
							"",
							"pm.test(\"Returns a book object\", () => {",
							"    const data = getData();",
							"",
							"    // Check the expected properties exist",
							"    pm.expect(data).to.have.property(\"title\");",
							"    pm.expect(data).to.have.property(\"author\");",
							"    pm.expect(data).to.have.property(\"published\");",
							"",
							"    // Check the values have the expected types",
							"    pm.expect(data.title).to.be.a('string');",
							"    pm.expect(data.author).to.be.a('string');",
							"    pm.expect(data.published).to.be.a('number');",
							"});",
							"",
							"pm.test(\"Return correct details for 'Sapiens' book\", () => {",
							"    const data = getData();",
							"",
							"    // Check expected values are present",
							"    pm.expect(data.title).to.equal(\"Sapiens\");",
							"    pm.expect(data.author).to.equal(\"Yuval Noah Harari\");",
							"    pm.expect(data.published).to.equal(2011);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "fc10e0bc-7981-4f99-9ccb-d84761daa42c",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Sapiens\",\n    \"author\": \"Yuval Noah Harari\",\n    \"published\": 2011\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/post",
				"description": "This request uses tests to verify both the structure (existence and type of individual properties) and exact values of the response data.\n\nUse `pm.expect(subject)` to wrap test subjects, and [Chai](https://www.chaijs.com/api/bdd/) for assertions."
			},
			"response": []
		},
		{
			"name": "Response time verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify response time is less than 5 seconds\", function () {",
							"    const fiveSecondsMs = 5_000; // 5 seconds in milliseconds",
							"    pm.expect(pm.response.responseTime).to.be.below(fiveSecondsMs);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d14c3069-d3f9-46d8-84e8-f624e979bcae",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"foo\": \"bar\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/get",
				"description": "This request has a test asserting that a response is received within a specific time limit (in this case 5 seconds). This is useful for ensuring consistent API performance.\n\nYou can access details of the response, such as response time, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
			},
			"response": []
		},
		{
			"name": "Header verification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify response headers have expected values\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.exist;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "30b2cf90-36f5-4379-86b2-f4351da5bf76",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/get",
				"description": "This request has a test asserting that certain response headers are present or have an expected value.\n\nYou can access details of the response, such as headers, on the `pm.response` object. See the [response object documentation](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#scripting-with-response-data) for other properties available."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "b6bb78b8-a2ae-449c-9e59-089028f56ebd",
			"key": "baseUrl",
			"value": "https://postman-echo.com"
		}
	]
}